"""JSON to OpenSSL gakefiles converter."""

# SPDX-License-Identifier: BSD-2-Clause

from __future__ import annotations

import argparse
import collections
import json
import pathlib
import sys

from jinja2.nativetypes import NativeEnvironment

INCS_EXTS = (".h", ".hh", ".hpp" )
SRCS_EXTS = (".c", ".cc", ".cpp", ".l", ".y" )

SKIP_EXTS = (".asn1", ".conf", ".in", ".inc", ".num", ".pl", ".pm" )
SKIP_NAMES = ("build.info", "config", "Configure" )


def resolve_dependencies_for_target(
    target: str,
    resolved_target_cache: dict[str, set[str]] | None = None,
    unresolved_target_cache: dict[str, set[str]] | None = None,
) -> None:
    """Resolve dependencies for a given target.

    Args:
        target:
        resolved_target_cache:
        unresolved_target_cache:

    Returns:
        A dictionary with the resolved dependencies for `target`.

    """
    if target in unresolved_target_cache:
        for dependency in unresolved_target_cache[target]:
            resolved_target_cache[target] |= resolve_dependencies_for_target(
                dependency,
                resolved_target_cache=resolved_target_cache,
                unresolved_target_cache=unresolved_target_cache,
            )
    else:
        resolved_target_cache[target] = {target}
    return resolved_target_cache[target]


def main(argv: list[str] | None = None) -> None:
    """Eponymous main."""
    argparser = argparse.ArgumentParser()
    argparser.add_argument(
        "-o",
        "--output-file",
        default=sys.stdout,
        dest="output_file",
        type=argparse.FileType("w"),
    )
    argparser.add_argument(
        "-t",
        "--target",
        dest="target",
        required=True,
    )
    argparser.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        help="Increase verbosity level.",
    )
    argparser.add_argument(
        "input_file",
        type=argparse.FileType("r"),
    )

    args = argparser.parse_args(args=argv)

    # ruff: noqa: E501, ERA001
    # log_level = (
    #     "debug" if args.verbose > 2 else ("info" if args.verbose > 1 else "error")
    # )
    # get_logger(__name__, level=log_level)

    unresolved_target_cache = json.load(args.input_file)

    resolved_target_cache = collections.defaultdict(set)
    resolve_dependencies_for_target(
        args.target,
        resolved_target_cache=resolved_target_cache,
        unresolved_target_cache=unresolved_target_cache,
    )
    names = collections.defaultdict(list)
    for dependency in resolved_target_cache[args.target]:
        parent = str(pathlib.Path(dependency).parent)
        name = str(pathlib.Path(dependency).name)
        if name in SKIP_NAMES or name.endswith(SKIP_EXTS):
            continue
        names[parent].append(name)

    parents = sorted(names)
    srcs_and_incs = []
    for parent in parents:
        srcs_and_incs.append(f"# {parent}")
        for name in sorted(names[parent]):
            if name.endswith(SRCS_EXTS):
                srcs_and_incs.append(f"SRCS+=\t{name}")
            elif name.endswith(INCS_EXTS):
                srcs_and_incs.append(f"INCS+=\t{name}")
            else:
                raise AssertionError(name)
        srcs_and_incs.append("")

    env = NativeEnvironment()
    template = env.from_string(r"""
SHLIBDIR?=      /lib
.if !defined(LIBCRYPTO_WITHOUT_SUBDIRS)
SUBDIR=         engines modules
.endif

.include <bsd.own.mk>
.include <src.opts.mk>

PACKAGE=        openssl-lib
LIB=            crypto
SHLIB_MAJOR=    35
VERSION_MAP=    ${.CURDIR}/Version.map

NO_LINT=
PCFILES=        libcrypto.pc

.include "Makefile.man"
.include "Makefile.inc"

{{ srcs_and_incs }}
INCSDIR=        ${INCLUDEDIR}/openssl

LIBADD= pthread

SRCS+=  buildinf.h

CLEANDIRS=      openssl
CLEANFILES=     buildinf.h

.if defined(ASM_${MACHINE_CPUARCH}) || defined(ASM_${MACHINE_ARCH})
_cmd1=/%%NO_ASM%%/d
.else
_cmd1=s/%%NO_ASM%%//
.endif
.if ${MK_OPENSSL_KTLS} != "no"
_cmd2=/%%NO_KTLS%%/d
.else
_cmd2=s/%%NO_KTLS%%//
.endif

buildinf.h: Makefile
        ( echo "/*"; \
        echo " * WARNING: do not edit!"; \
        echo " * Generated by ${.ALLSRC}"; \
        echo " */"; \
        echo "#define PLATFORM \"platform: FreeBSD-${MACHINE_ARCH}\""; \
        echo "#define DATE \"built on: reproducible build, date unspecified\""; \
        echo "static const char compiler_flags[] = \"compiler: ${COMPILER_TYPE}\";" ) \
        > ${.TARGET}

buildasm cleanasm:
.for arch in aarch64 amd64 arm i386 powerpc powerpc64 powerpc64le
        make MK_AUTO_OBJ=no -DWITHOUT_AUTO_ASM -DASM_${arch} \
            -f ${.CURDIR}/Makefile.asm -C ${SRCTOP}/sys/crypto/openssl/${arch} \
            ${.TARGET:S/build/all/:S/asm$//}
.endfor

.include <bsd.lib.mk>

PICFLAG+=       -DOPENSSL_PIC

.if defined(ASM_${MACHINE_CPUARCH})
.PATH:  ${SRCTOP}/sys/crypto/openssl/${MACHINE_CPUARCH}
.if defined(ASM_amd64)
.PATH:  ${LCRYPTO_SRC}/crypto/bn/asm
.endif
.elif defined(ASM_${MACHINE_ARCH})
.PATH:  ${SRCTOP}/sys/crypto/openssl/${MACHINE_ARCH}
.endif
{% if path_directives %}
.PATH:  {{ path_directives }}
{% endif %}
""".lstrip())
    with args.output_file as fp:
        fp.write(
            template.render(
                srcs_and_incs="\n".join(srcs_and_incs),
                path_directives=" \\\n\t".join(
                    f"${{LCRYPTO_SRC}}/{path}" for path in parents
                ),
            ),
        )
